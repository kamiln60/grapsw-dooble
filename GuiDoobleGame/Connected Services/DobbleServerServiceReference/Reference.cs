//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GuiDoobleGame.DobbleServerServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DobbleServerServiceReference.IDobbleServer", CallbackContract=typeof(GuiDoobleGame.DobbleServerServiceReference.IDobbleServerCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IDobbleServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/Connect", ReplyAction="http://tempuri.org/IDobbleServer/ConnectResponse")]
        DobbleGameServer.data.Player Connect(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/Connect", ReplyAction="http://tempuri.org/IDobbleServer/ConnectResponse")]
        System.Threading.Tasks.Task<DobbleGameServer.data.Player> ConnectAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/Disconnect", ReplyAction="http://tempuri.org/IDobbleServer/DisconnectResponse")]
        bool Disconnect(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/Disconnect", ReplyAction="http://tempuri.org/IDobbleServer/DisconnectResponse")]
        System.Threading.Tasks.Task<bool> DisconnectAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/GetData", ReplyAction="http://tempuri.org/IDobbleServer/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/GetData", ReplyAction="http://tempuri.org/IDobbleServer/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IDobbleServer/GetDataUsingDataContractResponse")]
        DobbleGameServer.CompositeType GetDataUsingDataContract(DobbleGameServer.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IDobbleServer/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<DobbleGameServer.CompositeType> GetDataUsingDataContractAsync(DobbleGameServer.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDobbleServerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/LockClient")]
        void LockClient();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/UnlockClient")]
        void UnlockClient();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDobbleServerChannel : GuiDoobleGame.DobbleServerServiceReference.IDobbleServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DobbleServerClient : System.ServiceModel.DuplexClientBase<GuiDoobleGame.DobbleServerServiceReference.IDobbleServer>, GuiDoobleGame.DobbleServerServiceReference.IDobbleServer {
        
        public DobbleServerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DobbleServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DobbleServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DobbleServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DobbleServerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public DobbleGameServer.data.Player Connect(string name) {
            return base.Channel.Connect(name);
        }
        
        public System.Threading.Tasks.Task<DobbleGameServer.data.Player> ConnectAsync(string name) {
            return base.Channel.ConnectAsync(name);
        }
        
        public bool Disconnect(string name) {
            return base.Channel.Disconnect(name);
        }
        
        public System.Threading.Tasks.Task<bool> DisconnectAsync(string name) {
            return base.Channel.DisconnectAsync(name);
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public DobbleGameServer.CompositeType GetDataUsingDataContract(DobbleGameServer.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<DobbleGameServer.CompositeType> GetDataUsingDataContractAsync(DobbleGameServer.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
