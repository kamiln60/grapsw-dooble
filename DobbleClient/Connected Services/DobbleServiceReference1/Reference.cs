//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DobbleClient.DobbleServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Card", Namespace="http://schemas.datacontract.org/2004/07/DobbleGameServer.data")]
    [System.SerializableAttribute()]
    public partial class Card : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] SymbolsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Symbols {
            get {
                return this.SymbolsField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolsField, value) != true)) {
                    this.SymbolsField = value;
                    this.RaisePropertyChanged("Symbols");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerSettingsDto", Namespace="http://schemas.datacontract.org/2004/07/DobbleGameServer.dto")]
    [System.SerializableAttribute()]
    public partial class ServerSettingsDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxRoundNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SymbolsPerCardField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxRoundNumber {
            get {
                return this.MaxRoundNumberField;
            }
            set {
                if ((this.MaxRoundNumberField.Equals(value) != true)) {
                    this.MaxRoundNumberField = value;
                    this.RaisePropertyChanged("MaxRoundNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SymbolsPerCard {
            get {
                return this.SymbolsPerCardField;
            }
            set {
                if ((this.SymbolsPerCardField.Equals(value) != true)) {
                    this.SymbolsPerCardField = value;
                    this.RaisePropertyChanged("SymbolsPerCard");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerDto", Namespace="http://schemas.datacontract.org/2004/07/DobbleGameServer.dto")]
    [System.SerializableAttribute()]
    public partial class PlayerDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CardIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PointsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CardId {
            get {
                return this.CardIdField;
            }
            set {
                if ((this.CardIdField.Equals(value) != true)) {
                    this.CardIdField = value;
                    this.RaisePropertyChanged("CardId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Points {
            get {
                return this.PointsField;
            }
            set {
                if ((this.PointsField.Equals(value) != true)) {
                    this.PointsField = value;
                    this.RaisePropertyChanged("Points");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameInfo", Namespace="http://schemas.datacontract.org/2004/07/DobbleGameServer.dto")]
    [System.SerializableAttribute()]
    public partial class GameInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdminNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DobbleClient.DobbleServiceReference1.ServerConfigDto ConfigField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DobbleClient.DobbleServiceReference1.State StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdminName {
            get {
                return this.AdminNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AdminNameField, value) != true)) {
                    this.AdminNameField = value;
                    this.RaisePropertyChanged("AdminName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DobbleClient.DobbleServiceReference1.ServerConfigDto Config {
            get {
                return this.ConfigField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfigField, value) != true)) {
                    this.ConfigField = value;
                    this.RaisePropertyChanged("Config");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DobbleClient.DobbleServiceReference1.State State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerConfigDto", Namespace="http://schemas.datacontract.org/2004/07/DobbleGameServer.dto")]
    [System.SerializableAttribute()]
    public partial class ServerConfigDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxRoundNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ReadinessEveryRoundField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoundIntervalMSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoundTimeMSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SymbolsPerCardField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxRoundNumber {
            get {
                return this.MaxRoundNumberField;
            }
            set {
                if ((this.MaxRoundNumberField.Equals(value) != true)) {
                    this.MaxRoundNumberField = value;
                    this.RaisePropertyChanged("MaxRoundNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ReadinessEveryRound {
            get {
                return this.ReadinessEveryRoundField;
            }
            set {
                if ((this.ReadinessEveryRoundField.Equals(value) != true)) {
                    this.ReadinessEveryRoundField = value;
                    this.RaisePropertyChanged("ReadinessEveryRound");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundIntervalMS {
            get {
                return this.RoundIntervalMSField;
            }
            set {
                if ((this.RoundIntervalMSField.Equals(value) != true)) {
                    this.RoundIntervalMSField = value;
                    this.RaisePropertyChanged("RoundIntervalMS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundTimeMS {
            get {
                return this.RoundTimeMSField;
            }
            set {
                if ((this.RoundTimeMSField.Equals(value) != true)) {
                    this.RoundTimeMSField = value;
                    this.RaisePropertyChanged("RoundTimeMS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SymbolsPerCard {
            get {
                return this.SymbolsPerCardField;
            }
            set {
                if ((this.SymbolsPerCardField.Equals(value) != true)) {
                    this.SymbolsPerCardField = value;
                    this.RaisePropertyChanged("SymbolsPerCard");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="State", Namespace="http://schemas.datacontract.org/2004/07/DobbleGameServer.data")]
    public enum State : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Lobby = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WaitForReadiness = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PickCard = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WaitForCard = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        End = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CardRoundDto", Namespace="http://schemas.datacontract.org/2004/07/DobbleGameServer.dto")]
    [System.SerializableAttribute()]
    public partial class CardRoundDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DobbleClient.DobbleServiceReference1.Card CurrentCardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DobbleClient.DobbleServiceReference1.Card PlayerCardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoundNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DobbleClient.DobbleServiceReference1.Card CurrentCard {
            get {
                return this.CurrentCardField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentCardField, value) != true)) {
                    this.CurrentCardField = value;
                    this.RaisePropertyChanged("CurrentCard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DobbleClient.DobbleServiceReference1.Card PlayerCard {
            get {
                return this.PlayerCardField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerCardField, value) != true)) {
                    this.PlayerCardField = value;
                    this.RaisePropertyChanged("PlayerCard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundNumber {
            get {
                return this.RoundNumberField;
            }
            set {
                if ((this.RoundNumberField.Equals(value) != true)) {
                    this.RoundNumberField = value;
                    this.RaisePropertyChanged("RoundNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LeaderboardRow", Namespace="http://schemas.datacontract.org/2004/07/DobbleGameServer")]
    [System.SerializableAttribute()]
    public partial class LeaderboardRow : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PointsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Points {
            get {
                return this.PointsField;
            }
            set {
                if ((this.PointsField.Equals(value) != true)) {
                    this.PointsField = value;
                    this.RaisePropertyChanged("Points");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DobbleServiceReference1.IDobbleServer", CallbackContract=typeof(DobbleClient.DobbleServiceReference1.IDobbleServerCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IDobbleServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/Connect", ReplyAction="http://tempuri.org/IDobbleServer/ConnectResponse")]
        bool Connect(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/Connect", ReplyAction="http://tempuri.org/IDobbleServer/ConnectResponse")]
        System.Threading.Tasks.Task<bool> ConnectAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/Disconnect", ReplyAction="http://tempuri.org/IDobbleServer/DisconnectResponse")]
        bool Disconnect(int token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/Disconnect", ReplyAction="http://tempuri.org/IDobbleServer/DisconnectResponse")]
        System.Threading.Tasks.Task<bool> DisconnectAsync(int token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/GetCards", ReplyAction="http://tempuri.org/IDobbleServer/GetCardsResponse")]
        DobbleClient.DobbleServiceReference1.Card[] GetCards();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/GetCards", ReplyAction="http://tempuri.org/IDobbleServer/GetCardsResponse")]
        System.Threading.Tasks.Task<DobbleClient.DobbleServiceReference1.Card[]> GetCardsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/ApplySettings", ReplyAction="http://tempuri.org/IDobbleServer/ApplySettingsResponse")]
        void ApplySettings(int token, DobbleClient.DobbleServiceReference1.ServerSettingsDto settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/ApplySettings", ReplyAction="http://tempuri.org/IDobbleServer/ApplySettingsResponse")]
        System.Threading.Tasks.Task ApplySettingsAsync(int token, DobbleClient.DobbleServiceReference1.ServerSettingsDto settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/PickACard", ReplyAction="http://tempuri.org/IDobbleServer/PickACardResponse")]
        void PickACard(int token, int symbolNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/PickACard", ReplyAction="http://tempuri.org/IDobbleServer/PickACardResponse")]
        System.Threading.Tasks.Task PickACardAsync(int token, int symbolNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/DeclareReadiness", ReplyAction="http://tempuri.org/IDobbleServer/DeclareReadinessResponse")]
        void DeclareReadiness(int token, bool readiness);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/DeclareReadiness", ReplyAction="http://tempuri.org/IDobbleServer/DeclareReadinessResponse")]
        System.Threading.Tasks.Task DeclareReadinessAsync(int token, bool readiness);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDobbleServerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/LockClient")]
        void LockClient();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/UnlockClient")]
        void UnlockClient();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/SendLog")]
        void SendLog(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/SendPlayerData")]
        void SendPlayerData(DobbleClient.DobbleServiceReference1.PlayerDto player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/SendGameInfo")]
        void SendGameInfo(DobbleClient.DobbleServiceReference1.GameInfo info);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/SendRoundData")]
        void SendRoundData(DobbleClient.DobbleServiceReference1.CardRoundDto roundDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/SendLeaderBoard")]
        void SendLeaderBoard(DobbleClient.DobbleServiceReference1.LeaderboardRow[] leaderboard);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://tempuri.org/IDobbleServer/EndGame")]
        void EndGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/Ping", ReplyAction="http://tempuri.org/IDobbleServer/PingResponse")]
        int Ping();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDobbleServerChannel : DobbleClient.DobbleServiceReference1.IDobbleServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DobbleServerClient : System.ServiceModel.DuplexClientBase<DobbleClient.DobbleServiceReference1.IDobbleServer>, DobbleClient.DobbleServiceReference1.IDobbleServer {
        
        public DobbleServerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DobbleServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DobbleServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DobbleServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DobbleServerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Connect(string name) {
            return base.Channel.Connect(name);
        }
        
        public System.Threading.Tasks.Task<bool> ConnectAsync(string name) {
            return base.Channel.ConnectAsync(name);
        }
        
        public bool Disconnect(int token) {
            return base.Channel.Disconnect(token);
        }
        
        public System.Threading.Tasks.Task<bool> DisconnectAsync(int token) {
            return base.Channel.DisconnectAsync(token);
        }
        
        public DobbleClient.DobbleServiceReference1.Card[] GetCards() {
            return base.Channel.GetCards();
        }
        
        public System.Threading.Tasks.Task<DobbleClient.DobbleServiceReference1.Card[]> GetCardsAsync() {
            return base.Channel.GetCardsAsync();
        }
        
        public void ApplySettings(int token, DobbleClient.DobbleServiceReference1.ServerSettingsDto settings) {
            base.Channel.ApplySettings(token, settings);
        }
        
        public System.Threading.Tasks.Task ApplySettingsAsync(int token, DobbleClient.DobbleServiceReference1.ServerSettingsDto settings) {
            return base.Channel.ApplySettingsAsync(token, settings);
        }
        
        public void PickACard(int token, int symbolNo) {
            base.Channel.PickACard(token, symbolNo);
        }
        
        public System.Threading.Tasks.Task PickACardAsync(int token, int symbolNo) {
            return base.Channel.PickACardAsync(token, symbolNo);
        }
        
        public void DeclareReadiness(int token, bool readiness) {
            base.Channel.DeclareReadiness(token, readiness);
        }
        
        public System.Threading.Tasks.Task DeclareReadinessAsync(int token, bool readiness) {
            return base.Channel.DeclareReadinessAsync(token, readiness);
        }
    }
}
