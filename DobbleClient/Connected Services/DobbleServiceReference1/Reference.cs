//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DobbleClient.DobbleServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Card", Namespace="http://schemas.datacontract.org/2004/07/DobbleGameServer.data")]
    [System.SerializableAttribute()]
    public partial class Card : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] SymbolsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Symbols {
            get {
                return this.SymbolsField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolsField, value) != true)) {
                    this.SymbolsField = value;
                    this.RaisePropertyChanged("Symbols");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerSettingsDto", Namespace="http://schemas.datacontract.org/2004/07/DobbleGameServer.dto")]
    [System.SerializableAttribute()]
    public partial class ServerSettingsDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxRoundNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SymbolsPerCardField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxRoundNumber {
            get {
                return this.MaxRoundNumberField;
            }
            set {
                if ((this.MaxRoundNumberField.Equals(value) != true)) {
                    this.MaxRoundNumberField = value;
                    this.RaisePropertyChanged("MaxRoundNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SymbolsPerCard {
            get {
                return this.SymbolsPerCardField;
            }
            set {
                if ((this.SymbolsPerCardField.Equals(value) != true)) {
                    this.SymbolsPerCardField = value;
                    this.RaisePropertyChanged("SymbolsPerCard");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerDto", Namespace="http://schemas.datacontract.org/2004/07/DobbleGameServer.dto")]
    [System.SerializableAttribute()]
    public partial class PlayerDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CardIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsReadyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PointsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CardId {
            get {
                return this.CardIdField;
            }
            set {
                if ((this.CardIdField.Equals(value) != true)) {
                    this.CardIdField = value;
                    this.RaisePropertyChanged("CardId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsReady {
            get {
                return this.IsReadyField;
            }
            set {
                if ((this.IsReadyField.Equals(value) != true)) {
                    this.IsReadyField = value;
                    this.RaisePropertyChanged("IsReady");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Points {
            get {
                return this.PointsField;
            }
            set {
                if ((this.PointsField.Equals(value) != true)) {
                    this.PointsField = value;
                    this.RaisePropertyChanged("Points");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameInfo", Namespace="http://schemas.datacontract.org/2004/07/DobbleGameServer.dto")]
    [System.SerializableAttribute()]
    public partial class GameInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdminNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DobbleClient.DobbleServiceReference1.ServerConfigDto ConfigField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdminName {
            get {
                return this.AdminNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AdminNameField, value) != true)) {
                    this.AdminNameField = value;
                    this.RaisePropertyChanged("AdminName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DobbleClient.DobbleServiceReference1.ServerConfigDto Config {
            get {
                return this.ConfigField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfigField, value) != true)) {
                    this.ConfigField = value;
                    this.RaisePropertyChanged("Config");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerConfigDto", Namespace="http://schemas.datacontract.org/2004/07/DobbleGameServer.dto")]
    [System.SerializableAttribute()]
    public partial class ServerConfigDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxRoundNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ReadinessEveryRoundField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoundIntervalMSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoundTimeMSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SymbolsPerCardField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxRoundNumber {
            get {
                return this.MaxRoundNumberField;
            }
            set {
                if ((this.MaxRoundNumberField.Equals(value) != true)) {
                    this.MaxRoundNumberField = value;
                    this.RaisePropertyChanged("MaxRoundNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ReadinessEveryRound {
            get {
                return this.ReadinessEveryRoundField;
            }
            set {
                if ((this.ReadinessEveryRoundField.Equals(value) != true)) {
                    this.ReadinessEveryRoundField = value;
                    this.RaisePropertyChanged("ReadinessEveryRound");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundIntervalMS {
            get {
                return this.RoundIntervalMSField;
            }
            set {
                if ((this.RoundIntervalMSField.Equals(value) != true)) {
                    this.RoundIntervalMSField = value;
                    this.RaisePropertyChanged("RoundIntervalMS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundTimeMS {
            get {
                return this.RoundTimeMSField;
            }
            set {
                if ((this.RoundTimeMSField.Equals(value) != true)) {
                    this.RoundTimeMSField = value;
                    this.RaisePropertyChanged("RoundTimeMS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SymbolsPerCard {
            get {
                return this.SymbolsPerCardField;
            }
            set {
                if ((this.SymbolsPerCardField.Equals(value) != true)) {
                    this.SymbolsPerCardField = value;
                    this.RaisePropertyChanged("SymbolsPerCard");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CardRoundDto", Namespace="http://schemas.datacontract.org/2004/07/DobbleGameServer.dto")]
    [System.SerializableAttribute()]
    public partial class CardRoundDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DobbleClient.DobbleServiceReference1.Card CurrentCardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DobbleClient.DobbleServiceReference1.Card PlayerCardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoundNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DobbleClient.DobbleServiceReference1.Card CurrentCard {
            get {
                return this.CurrentCardField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentCardField, value) != true)) {
                    this.CurrentCardField = value;
                    this.RaisePropertyChanged("CurrentCard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DobbleClient.DobbleServiceReference1.Card PlayerCard {
            get {
                return this.PlayerCardField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerCardField, value) != true)) {
                    this.PlayerCardField = value;
                    this.RaisePropertyChanged("PlayerCard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundNumber {
            get {
                return this.RoundNumberField;
            }
            set {
                if ((this.RoundNumberField.Equals(value) != true)) {
                    this.RoundNumberField = value;
                    this.RaisePropertyChanged("RoundNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LeaderboardRow", Namespace="http://schemas.datacontract.org/2004/07/DobbleGameServer")]
    [System.SerializableAttribute()]
    public partial class LeaderboardRow : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PointsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Points {
            get {
                return this.PointsField;
            }
            set {
                if ((this.PointsField.Equals(value) != true)) {
                    this.PointsField = value;
                    this.RaisePropertyChanged("Points");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DobbleServiceReference1.IDobbleServer", CallbackContract=typeof(DobbleClient.DobbleServiceReference1.IDobbleServerCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IDobbleServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/Connect", ReplyAction="http://tempuri.org/IDobbleServer/ConnectResponse")]
        bool Connect(string name);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDobbleServer/Connect", ReplyAction="http://tempuri.org/IDobbleServer/ConnectResponse")]
        System.IAsyncResult BeginConnect(string name, System.AsyncCallback callback, object asyncState);
        
        bool EndConnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/Disconnect", ReplyAction="http://tempuri.org/IDobbleServer/DisconnectResponse")]
        bool Disconnect(int token);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDobbleServer/Disconnect", ReplyAction="http://tempuri.org/IDobbleServer/DisconnectResponse")]
        System.IAsyncResult BeginDisconnect(int token, System.AsyncCallback callback, object asyncState);
        
        bool EndDisconnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/GetCards", ReplyAction="http://tempuri.org/IDobbleServer/GetCardsResponse")]
        DobbleClient.DobbleServiceReference1.Card[] GetCards();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDobbleServer/GetCards", ReplyAction="http://tempuri.org/IDobbleServer/GetCardsResponse")]
        System.IAsyncResult BeginGetCards(System.AsyncCallback callback, object asyncState);
        
        DobbleClient.DobbleServiceReference1.Card[] EndGetCards(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/ApplySettings", ReplyAction="http://tempuri.org/IDobbleServer/ApplySettingsResponse")]
        void ApplySettings(int token, DobbleClient.DobbleServiceReference1.ServerSettingsDto settings);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDobbleServer/ApplySettings", ReplyAction="http://tempuri.org/IDobbleServer/ApplySettingsResponse")]
        System.IAsyncResult BeginApplySettings(int token, DobbleClient.DobbleServiceReference1.ServerSettingsDto settings, System.AsyncCallback callback, object asyncState);
        
        void EndApplySettings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/PickACard", ReplyAction="http://tempuri.org/IDobbleServer/PickACardResponse")]
        void PickACard(int token, int symbolNo);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDobbleServer/PickACard", ReplyAction="http://tempuri.org/IDobbleServer/PickACardResponse")]
        System.IAsyncResult BeginPickACard(int token, int symbolNo, System.AsyncCallback callback, object asyncState);
        
        void EndPickACard(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/DeclareReadiness", ReplyAction="http://tempuri.org/IDobbleServer/DeclareReadinessResponse")]
        void DeclareReadiness(int token, bool readiness);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDobbleServer/DeclareReadiness", ReplyAction="http://tempuri.org/IDobbleServer/DeclareReadinessResponse")]
        System.IAsyncResult BeginDeclareReadiness(int token, bool readiness, System.AsyncCallback callback, object asyncState);
        
        void EndDeclareReadiness(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDobbleServerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/LockClient")]
        void LockClient();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDobbleServer/LockClient")]
        System.IAsyncResult BeginLockClient(System.AsyncCallback callback, object asyncState);
        
        void EndLockClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/UnlockClient")]
        void UnlockClient();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDobbleServer/UnlockClient")]
        System.IAsyncResult BeginUnlockClient(System.AsyncCallback callback, object asyncState);
        
        void EndUnlockClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/SendLog")]
        void SendLog(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDobbleServer/SendLog")]
        System.IAsyncResult BeginSendLog(string message, System.AsyncCallback callback, object asyncState);
        
        void EndSendLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/SendPlayerData")]
        void SendPlayerData(DobbleClient.DobbleServiceReference1.PlayerDto player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDobbleServer/SendPlayerData")]
        System.IAsyncResult BeginSendPlayerData(DobbleClient.DobbleServiceReference1.PlayerDto player, System.AsyncCallback callback, object asyncState);
        
        void EndSendPlayerData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/SendGameInfo")]
        void SendGameInfo(DobbleClient.DobbleServiceReference1.GameInfo info);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDobbleServer/SendGameInfo")]
        System.IAsyncResult BeginSendGameInfo(DobbleClient.DobbleServiceReference1.GameInfo info, System.AsyncCallback callback, object asyncState);
        
        void EndSendGameInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/SendRoundData")]
        void SendRoundData(DobbleClient.DobbleServiceReference1.CardRoundDto roundDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDobbleServer/SendRoundData")]
        System.IAsyncResult BeginSendRoundData(DobbleClient.DobbleServiceReference1.CardRoundDto roundDto, System.AsyncCallback callback, object asyncState);
        
        void EndSendRoundData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/SendLeaderBoard")]
        void SendLeaderBoard(DobbleClient.DobbleServiceReference1.LeaderboardRow[] leaderboard);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDobbleServer/SendLeaderBoard")]
        System.IAsyncResult BeginSendLeaderBoard(DobbleClient.DobbleServiceReference1.LeaderboardRow[] leaderboard, System.AsyncCallback callback, object asyncState);
        
        void EndSendLeaderBoard(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://tempuri.org/IDobbleServer/EndGame")]
        void EndGame();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, AsyncPattern=true, Action="http://tempuri.org/IDobbleServer/EndGame")]
        System.IAsyncResult BeginEndGame(System.AsyncCallback callback, object asyncState);
        
        void EndEndGame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDobbleServer/Ping", ReplyAction="http://tempuri.org/IDobbleServer/PingResponse")]
        int Ping();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDobbleServer/Ping", ReplyAction="http://tempuri.org/IDobbleServer/PingResponse")]
        System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState);
        
        int EndPing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/SendPlayerList")]
        void SendPlayerList(DobbleClient.DobbleServiceReference1.PlayerDto[] players);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDobbleServer/SendPlayerList")]
        System.IAsyncResult BeginSendPlayerList(DobbleClient.DobbleServiceReference1.PlayerDto[] players, System.AsyncCallback callback, object asyncState);
        
        void EndSendPlayerList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/NotifyRoundStart")]
        void NotifyRoundStart(int round);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDobbleServer/NotifyRoundStart")]
        System.IAsyncResult BeginNotifyRoundStart(int round, System.AsyncCallback callback, object asyncState);
        
        void EndNotifyRoundStart(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDobbleServer/NotifyRoundEnd")]
        void NotifyRoundEnd(int round);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IDobbleServer/NotifyRoundEnd")]
        System.IAsyncResult BeginNotifyRoundEnd(int round, System.AsyncCallback callback, object asyncState);
        
        void EndNotifyRoundEnd(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDobbleServerChannel : DobbleClient.DobbleServiceReference1.IDobbleServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DisconnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DisconnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCardsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCardsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DobbleClient.DobbleServiceReference1.Card[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DobbleClient.DobbleServiceReference1.Card[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DobbleServerClient : System.ServiceModel.DuplexClientBase<DobbleClient.DobbleServiceReference1.IDobbleServer>, DobbleClient.DobbleServiceReference1.IDobbleServer {
        
        private BeginOperationDelegate onBeginConnectDelegate;
        
        private EndOperationDelegate onEndConnectDelegate;
        
        private System.Threading.SendOrPostCallback onConnectCompletedDelegate;
        
        private BeginOperationDelegate onBeginDisconnectDelegate;
        
        private EndOperationDelegate onEndDisconnectDelegate;
        
        private System.Threading.SendOrPostCallback onDisconnectCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCardsDelegate;
        
        private EndOperationDelegate onEndGetCardsDelegate;
        
        private System.Threading.SendOrPostCallback onGetCardsCompletedDelegate;
        
        private BeginOperationDelegate onBeginApplySettingsDelegate;
        
        private EndOperationDelegate onEndApplySettingsDelegate;
        
        private System.Threading.SendOrPostCallback onApplySettingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginPickACardDelegate;
        
        private EndOperationDelegate onEndPickACardDelegate;
        
        private System.Threading.SendOrPostCallback onPickACardCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeclareReadinessDelegate;
        
        private EndOperationDelegate onEndDeclareReadinessDelegate;
        
        private System.Threading.SendOrPostCallback onDeclareReadinessCompletedDelegate;
        
        public DobbleServerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DobbleServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DobbleServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DobbleServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DobbleServerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<ConnectCompletedEventArgs> ConnectCompleted;
        
        public event System.EventHandler<DisconnectCompletedEventArgs> DisconnectCompleted;
        
        public event System.EventHandler<GetCardsCompletedEventArgs> GetCardsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ApplySettingsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PickACardCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeclareReadinessCompleted;
        
        public bool Connect(string name) {
            return base.Channel.Connect(name);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConnect(string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnect(name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndConnect(System.IAsyncResult result) {
            return base.Channel.EndConnect(result);
        }
        
        private System.IAsyncResult OnBeginConnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            return this.BeginConnect(name, callback, asyncState);
        }
        
        private object[] OnEndConnect(System.IAsyncResult result) {
            bool retVal = this.EndConnect(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConnectCompleted(object state) {
            if ((this.ConnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConnectCompleted(this, new ConnectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConnectAsync(string name) {
            this.ConnectAsync(name, null);
        }
        
        public void ConnectAsync(string name, object userState) {
            if ((this.onBeginConnectDelegate == null)) {
                this.onBeginConnectDelegate = new BeginOperationDelegate(this.OnBeginConnect);
            }
            if ((this.onEndConnectDelegate == null)) {
                this.onEndConnectDelegate = new EndOperationDelegate(this.OnEndConnect);
            }
            if ((this.onConnectCompletedDelegate == null)) {
                this.onConnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnectCompleted);
            }
            base.InvokeAsync(this.onBeginConnectDelegate, new object[] {
                        name}, this.onEndConnectDelegate, this.onConnectCompletedDelegate, userState);
        }
        
        public bool Disconnect(int token) {
            return base.Channel.Disconnect(token);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDisconnect(int token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisconnect(token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDisconnect(System.IAsyncResult result) {
            return base.Channel.EndDisconnect(result);
        }
        
        private System.IAsyncResult OnBeginDisconnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int token = ((int)(inValues[0]));
            return this.BeginDisconnect(token, callback, asyncState);
        }
        
        private object[] OnEndDisconnect(System.IAsyncResult result) {
            bool retVal = this.EndDisconnect(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDisconnectCompleted(object state) {
            if ((this.DisconnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DisconnectCompleted(this, new DisconnectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DisconnectAsync(int token) {
            this.DisconnectAsync(token, null);
        }
        
        public void DisconnectAsync(int token, object userState) {
            if ((this.onBeginDisconnectDelegate == null)) {
                this.onBeginDisconnectDelegate = new BeginOperationDelegate(this.OnBeginDisconnect);
            }
            if ((this.onEndDisconnectDelegate == null)) {
                this.onEndDisconnectDelegate = new EndOperationDelegate(this.OnEndDisconnect);
            }
            if ((this.onDisconnectCompletedDelegate == null)) {
                this.onDisconnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisconnectCompleted);
            }
            base.InvokeAsync(this.onBeginDisconnectDelegate, new object[] {
                        token}, this.onEndDisconnectDelegate, this.onDisconnectCompletedDelegate, userState);
        }
        
        public DobbleClient.DobbleServiceReference1.Card[] GetCards() {
            return base.Channel.GetCards();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCards(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCards(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DobbleClient.DobbleServiceReference1.Card[] EndGetCards(System.IAsyncResult result) {
            return base.Channel.EndGetCards(result);
        }
        
        private System.IAsyncResult OnBeginGetCards(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetCards(callback, asyncState);
        }
        
        private object[] OnEndGetCards(System.IAsyncResult result) {
            DobbleClient.DobbleServiceReference1.Card[] retVal = this.EndGetCards(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCardsCompleted(object state) {
            if ((this.GetCardsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCardsCompleted(this, new GetCardsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCardsAsync() {
            this.GetCardsAsync(null);
        }
        
        public void GetCardsAsync(object userState) {
            if ((this.onBeginGetCardsDelegate == null)) {
                this.onBeginGetCardsDelegate = new BeginOperationDelegate(this.OnBeginGetCards);
            }
            if ((this.onEndGetCardsDelegate == null)) {
                this.onEndGetCardsDelegate = new EndOperationDelegate(this.OnEndGetCards);
            }
            if ((this.onGetCardsCompletedDelegate == null)) {
                this.onGetCardsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCardsCompleted);
            }
            base.InvokeAsync(this.onBeginGetCardsDelegate, null, this.onEndGetCardsDelegate, this.onGetCardsCompletedDelegate, userState);
        }
        
        public void ApplySettings(int token, DobbleClient.DobbleServiceReference1.ServerSettingsDto settings) {
            base.Channel.ApplySettings(token, settings);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginApplySettings(int token, DobbleClient.DobbleServiceReference1.ServerSettingsDto settings, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginApplySettings(token, settings, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndApplySettings(System.IAsyncResult result) {
            base.Channel.EndApplySettings(result);
        }
        
        private System.IAsyncResult OnBeginApplySettings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int token = ((int)(inValues[0]));
            DobbleClient.DobbleServiceReference1.ServerSettingsDto settings = ((DobbleClient.DobbleServiceReference1.ServerSettingsDto)(inValues[1]));
            return this.BeginApplySettings(token, settings, callback, asyncState);
        }
        
        private object[] OnEndApplySettings(System.IAsyncResult result) {
            this.EndApplySettings(result);
            return null;
        }
        
        private void OnApplySettingsCompleted(object state) {
            if ((this.ApplySettingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ApplySettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ApplySettingsAsync(int token, DobbleClient.DobbleServiceReference1.ServerSettingsDto settings) {
            this.ApplySettingsAsync(token, settings, null);
        }
        
        public void ApplySettingsAsync(int token, DobbleClient.DobbleServiceReference1.ServerSettingsDto settings, object userState) {
            if ((this.onBeginApplySettingsDelegate == null)) {
                this.onBeginApplySettingsDelegate = new BeginOperationDelegate(this.OnBeginApplySettings);
            }
            if ((this.onEndApplySettingsDelegate == null)) {
                this.onEndApplySettingsDelegate = new EndOperationDelegate(this.OnEndApplySettings);
            }
            if ((this.onApplySettingsCompletedDelegate == null)) {
                this.onApplySettingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnApplySettingsCompleted);
            }
            base.InvokeAsync(this.onBeginApplySettingsDelegate, new object[] {
                        token,
                        settings}, this.onEndApplySettingsDelegate, this.onApplySettingsCompletedDelegate, userState);
        }
        
        public void PickACard(int token, int symbolNo) {
            base.Channel.PickACard(token, symbolNo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPickACard(int token, int symbolNo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPickACard(token, symbolNo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndPickACard(System.IAsyncResult result) {
            base.Channel.EndPickACard(result);
        }
        
        private System.IAsyncResult OnBeginPickACard(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int token = ((int)(inValues[0]));
            int symbolNo = ((int)(inValues[1]));
            return this.BeginPickACard(token, symbolNo, callback, asyncState);
        }
        
        private object[] OnEndPickACard(System.IAsyncResult result) {
            this.EndPickACard(result);
            return null;
        }
        
        private void OnPickACardCompleted(object state) {
            if ((this.PickACardCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PickACardCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PickACardAsync(int token, int symbolNo) {
            this.PickACardAsync(token, symbolNo, null);
        }
        
        public void PickACardAsync(int token, int symbolNo, object userState) {
            if ((this.onBeginPickACardDelegate == null)) {
                this.onBeginPickACardDelegate = new BeginOperationDelegate(this.OnBeginPickACard);
            }
            if ((this.onEndPickACardDelegate == null)) {
                this.onEndPickACardDelegate = new EndOperationDelegate(this.OnEndPickACard);
            }
            if ((this.onPickACardCompletedDelegate == null)) {
                this.onPickACardCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPickACardCompleted);
            }
            base.InvokeAsync(this.onBeginPickACardDelegate, new object[] {
                        token,
                        symbolNo}, this.onEndPickACardDelegate, this.onPickACardCompletedDelegate, userState);
        }
        
        public void DeclareReadiness(int token, bool readiness) {
            base.Channel.DeclareReadiness(token, readiness);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeclareReadiness(int token, bool readiness, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeclareReadiness(token, readiness, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeclareReadiness(System.IAsyncResult result) {
            base.Channel.EndDeclareReadiness(result);
        }
        
        private System.IAsyncResult OnBeginDeclareReadiness(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int token = ((int)(inValues[0]));
            bool readiness = ((bool)(inValues[1]));
            return this.BeginDeclareReadiness(token, readiness, callback, asyncState);
        }
        
        private object[] OnEndDeclareReadiness(System.IAsyncResult result) {
            this.EndDeclareReadiness(result);
            return null;
        }
        
        private void OnDeclareReadinessCompleted(object state) {
            if ((this.DeclareReadinessCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeclareReadinessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeclareReadinessAsync(int token, bool readiness) {
            this.DeclareReadinessAsync(token, readiness, null);
        }
        
        public void DeclareReadinessAsync(int token, bool readiness, object userState) {
            if ((this.onBeginDeclareReadinessDelegate == null)) {
                this.onBeginDeclareReadinessDelegate = new BeginOperationDelegate(this.OnBeginDeclareReadiness);
            }
            if ((this.onEndDeclareReadinessDelegate == null)) {
                this.onEndDeclareReadinessDelegate = new EndOperationDelegate(this.OnEndDeclareReadiness);
            }
            if ((this.onDeclareReadinessCompletedDelegate == null)) {
                this.onDeclareReadinessCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeclareReadinessCompleted);
            }
            base.InvokeAsync(this.onBeginDeclareReadinessDelegate, new object[] {
                        token,
                        readiness}, this.onEndDeclareReadinessDelegate, this.onDeclareReadinessCompletedDelegate, userState);
        }
    }
}
